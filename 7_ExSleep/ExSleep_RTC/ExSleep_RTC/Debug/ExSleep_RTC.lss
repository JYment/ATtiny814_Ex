
ExSleep_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b2a  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001596  00000000  00000000  00001f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000325  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00003858  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cb7  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c7  00000000  00000000  0000456f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00004636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__vector_6>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	4e d0       	rcall	.+156    	; 0xde <main>
  42:	9b c1       	rjmp	.+822    	; 0x37a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <__vector_6>:
#include <avr/interrupt.h>
#include <avr/sleep.h>


ISR(RTC_CNT_vect)
{
  46:	1f 92       	push	r1
  48:	0f 92       	push	r0
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	0f 92       	push	r0
  4e:	11 24       	eor	r1, r1
  50:	8f 93       	push	r24
	RTC.INTFLAGS	= RTC_OVF_bm;
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
  58:	8f 91       	pop	r24
  5a:	0f 90       	pop	r0
  5c:	0f be       	out	0x3f, r0	; 63
  5e:	0f 90       	pop	r0
  60:	1f 90       	pop	r1
  62:	18 95       	reti

00000064 <delay_ms_sleep_rtc>:


void delay_ms_sleep_rtc(uint16_t t_ms)
{
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
	uint8_t ps;
	asm("in __tmp_reg__, __SREG__");
  68:	0f b6       	in	r0, 0x3f	; 63
	asm("sei");
  6a:	78 94       	sei
	asm("push __tmp_reg__");
  6c:	0f 92       	push	r0
	
	for ( ps=0; t_ms >= 2000; ps++){
  6e:	80 3d       	cpi	r24, 0xD0	; 208
  70:	27 e0       	ldi	r18, 0x07	; 7
  72:	92 07       	cpc	r25, r18
  74:	30 f0       	brcs	.+12     	; 0x82 <delay_ms_sleep_rtc+0x1e>
		t_ms = t_ms >> 1;
  76:	96 95       	lsr	r25
  78:	87 95       	ror	r24
	uint8_t ps;
	asm("in __tmp_reg__, __SREG__");
	asm("sei");
	asm("push __tmp_reg__");
	
	for ( ps=0; t_ms >= 2000; ps++){
  7a:	80 3d       	cpi	r24, 0xD0	; 208
  7c:	27 e0       	ldi	r18, 0x07	; 7
  7e:	92 07       	cpc	r25, r18
  80:	d0 f7       	brcc	.-12     	; 0x76 <delay_ms_sleep_rtc+0x12>
		t_ms = t_ms >> 1;
	}
	
	while (RTC.STATUS > 0);		// Wait for all register to be synchronized
  82:	e0 e4       	ldi	r30, 0x40	; 64
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	21 81       	ldd	r18, Z+1	; 0x01
  88:	21 11       	cpse	r18, r1
  8a:	fd cf       	rjmp	.-6      	; 0x86 <delay_ms_sleep_rtc+0x22>
	
	RTC.CNT	= 0x0;
  8c:	c0 e4       	ldi	r28, 0x40	; 64
  8e:	d1 e0       	ldi	r29, 0x01	; 1
  90:	18 86       	std	Y+8, r1	; 0x08
  92:	19 86       	std	Y+9, r1	; 0x09
	RTC.PER	= (uint16_t) (t_ms * 32.768);
  94:	bc 01       	movw	r22, r24
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	74 d0       	rcall	.+232    	; 0x184 <__floatunsisf>
  9c:	2f e6       	ldi	r18, 0x6F	; 111
  9e:	32 e1       	ldi	r19, 0x12	; 18
  a0:	43 e0       	ldi	r20, 0x03	; 3
  a2:	52 e4       	ldi	r21, 0x42	; 66
  a4:	d5 d0       	rcall	.+426    	; 0x250 <__mulsf3>
  a6:	3f d0       	rcall	.+126    	; 0x126 <__fixunssfsi>
  a8:	6a 87       	std	Y+10, r22	; 0x0a
  aa:	7b 87       	std	Y+11, r23	; 0x0b
	RTC.INTCTRL	= RTC_OVF_bm;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8a 83       	std	Y+2, r24	; 0x02
//	RTC.CTRLA= RTC_RTCEN_bm;
	RTC.CTRLA	= RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
  b0:	81 e8       	ldi	r24, 0x81	; 129
  b2:	88 83       	st	Y, r24
	
//	set_sleep_mode(SLEEP_MODE_IDLE);
	set_sleep_mode(SLEEP_MODE_STANDBY);
  b4:	e0 e5       	ldi	r30, 0x50	; 80
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	89 7f       	andi	r24, 0xF9	; 249
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	
	sleep_enable();
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
	
	sleep_cpu();
  c6:	88 95       	sleep
	// 이 위치에서 대부분의 시간을 소비
	sleep_disable();
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
	
	RTC.CTRLA &= ~RTC_RTCEN_bm;
  ce:	88 81       	ld	r24, Y
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	88 83       	st	Y, r24

    asm("pop __tmp_reg__");
  d4:	0f 90       	pop	r0
    asm("out __SREG__, __tmp_reg__");
  d6:	0f be       	out	0x3f, r0	; 63
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:


int main(void)
{
    PORTA.DIRSET	= _BV(3);
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
    while (1) 
    {
		for(int i=0; ;i++)
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PORTA.OUTSET	= _BV(3);
  e8:	e1 2c       	mov	r14, r1
  ea:	68 94       	set
  ec:	ff 24       	eor	r15, r15
  ee:	f2 f8       	bld	r15, 2
  f0:	68 94       	set
  f2:	dd 24       	eor	r13, r13
  f4:	d3 f8       	bld	r13, 3
  f6:	bd 2c       	mov	r11, r13
			delay_ms_sleep_rtc(100 + (i&7)*100);
  f8:	0f 2e       	mov	r0, r31
  fa:	f4 e6       	ldi	r31, 0x64	; 100
  fc:	cf 2e       	mov	r12, r31
  fe:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		for(int i=0; ;i++)
		{
			PORTA.OUTSET	= _BV(3);
 100:	f7 01       	movw	r30, r14
 102:	b5 82       	std	Z+5, r11	; 0x05
			delay_ms_sleep_rtc(100 + (i&7)*100);
 104:	ce 01       	movw	r24, r28
 106:	87 70       	andi	r24, 0x07	; 7
 108:	99 27       	eor	r25, r25
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	c8 9e       	mul	r12, r24
 10e:	80 01       	movw	r16, r0
 110:	c9 9e       	mul	r12, r25
 112:	10 0d       	add	r17, r0
 114:	11 24       	eor	r1, r1
 116:	c8 01       	movw	r24, r16
 118:	a5 df       	rcall	.-182    	; 0x64 <delay_ms_sleep_rtc>
			PORTA.OUTCLR	= _BV(3);
 11a:	f7 01       	movw	r30, r14
 11c:	d6 82       	std	Z+6, r13	; 0x06
			delay_ms_sleep_rtc(100 + (i&7)*100);
 11e:	c8 01       	movw	r24, r16
 120:	a1 df       	rcall	.-190    	; 0x64 <delay_ms_sleep_rtc>
{
    PORTA.DIRSET	= _BV(3);
	
    while (1) 
    {
		for(int i=0; ;i++)
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	ed cf       	rjmp	.-38     	; 0x100 <main+0x22>

00000126 <__fixunssfsi>:
 126:	0e 94 07 01 	call	0x20e	; 0x20e <__fp_splitA>
 12a:	88 f0       	brcs	.+34     	; 0x14e <__fixunssfsi+0x28>
 12c:	9f 57       	subi	r25, 0x7F	; 127
 12e:	98 f0       	brcs	.+38     	; 0x156 <__fixunssfsi+0x30>
 130:	b9 2f       	mov	r27, r25
 132:	99 27       	eor	r25, r25
 134:	b7 51       	subi	r27, 0x17	; 23
 136:	b0 f0       	brcs	.+44     	; 0x164 <__fixunssfsi+0x3e>
 138:	e1 f0       	breq	.+56     	; 0x172 <__fixunssfsi+0x4c>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	88 1f       	adc	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	1a f0       	brmi	.+6      	; 0x14a <__fixunssfsi+0x24>
 144:	ba 95       	dec	r27
 146:	c9 f7       	brne	.-14     	; 0x13a <__fixunssfsi+0x14>
 148:	14 c0       	rjmp	.+40     	; 0x172 <__fixunssfsi+0x4c>
 14a:	b1 30       	cpi	r27, 0x01	; 1
 14c:	91 f0       	breq	.+36     	; 0x172 <__fixunssfsi+0x4c>
 14e:	0e 94 21 01 	call	0x242	; 0x242 <__fp_zero>
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	08 95       	ret
 156:	0c 94 21 01 	jmp	0x242	; 0x242 <__fp_zero>
 15a:	67 2f       	mov	r22, r23
 15c:	78 2f       	mov	r23, r24
 15e:	88 27       	eor	r24, r24
 160:	b8 5f       	subi	r27, 0xF8	; 248
 162:	39 f0       	breq	.+14     	; 0x172 <__fixunssfsi+0x4c>
 164:	b9 3f       	cpi	r27, 0xF9	; 249
 166:	cc f3       	brlt	.-14     	; 0x15a <__fixunssfsi+0x34>
 168:	86 95       	lsr	r24
 16a:	77 95       	ror	r23
 16c:	67 95       	ror	r22
 16e:	b3 95       	inc	r27
 170:	d9 f7       	brne	.-10     	; 0x168 <__fixunssfsi+0x42>
 172:	3e f4       	brtc	.+14     	; 0x182 <__fixunssfsi+0x5c>
 174:	90 95       	com	r25
 176:	80 95       	com	r24
 178:	70 95       	com	r23
 17a:	61 95       	neg	r22
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	8f 4f       	sbci	r24, 0xFF	; 255
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	08 95       	ret

00000184 <__floatunsisf>:
 184:	e8 94       	clt
 186:	09 c0       	rjmp	.+18     	; 0x19a <__floatsisf+0x12>

00000188 <__floatsisf>:
 188:	97 fb       	bst	r25, 7
 18a:	3e f4       	brtc	.+14     	; 0x19a <__floatsisf+0x12>
 18c:	90 95       	com	r25
 18e:	80 95       	com	r24
 190:	70 95       	com	r23
 192:	61 95       	neg	r22
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	8f 4f       	sbci	r24, 0xFF	; 255
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	99 23       	and	r25, r25
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <__floatsisf+0x40>
 19e:	f9 2f       	mov	r31, r25
 1a0:	96 e9       	ldi	r25, 0x96	; 150
 1a2:	bb 27       	eor	r27, r27
 1a4:	93 95       	inc	r25
 1a6:	f6 95       	lsr	r31
 1a8:	87 95       	ror	r24
 1aa:	77 95       	ror	r23
 1ac:	67 95       	ror	r22
 1ae:	b7 95       	ror	r27
 1b0:	f1 11       	cpse	r31, r1
 1b2:	f8 cf       	rjmp	.-16     	; 0x1a4 <__floatsisf+0x1c>
 1b4:	fa f4       	brpl	.+62     	; 0x1f4 <__floatsisf+0x6c>
 1b6:	bb 0f       	add	r27, r27
 1b8:	11 f4       	brne	.+4      	; 0x1be <__floatsisf+0x36>
 1ba:	60 ff       	sbrs	r22, 0
 1bc:	1b c0       	rjmp	.+54     	; 0x1f4 <__floatsisf+0x6c>
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	8f 4f       	sbci	r24, 0xFF	; 255
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	16 c0       	rjmp	.+44     	; 0x1f4 <__floatsisf+0x6c>
 1c8:	88 23       	and	r24, r24
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <__floatsisf+0x48>
 1cc:	96 e9       	ldi	r25, 0x96	; 150
 1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <__floatsisf+0x6a>
 1d0:	77 23       	and	r23, r23
 1d2:	21 f0       	breq	.+8      	; 0x1dc <__floatsisf+0x54>
 1d4:	9e e8       	ldi	r25, 0x8E	; 142
 1d6:	87 2f       	mov	r24, r23
 1d8:	76 2f       	mov	r23, r22
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <__floatsisf+0x5e>
 1dc:	66 23       	and	r22, r22
 1de:	71 f0       	breq	.+28     	; 0x1fc <__floatsisf+0x74>
 1e0:	96 e8       	ldi	r25, 0x86	; 134
 1e2:	86 2f       	mov	r24, r22
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	2a f0       	brmi	.+10     	; 0x1f4 <__floatsisf+0x6c>
 1ea:	9a 95       	dec	r25
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	88 1f       	adc	r24, r24
 1f2:	da f7       	brpl	.-10     	; 0x1ea <__floatsisf+0x62>
 1f4:	88 0f       	add	r24, r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	97 f9       	bld	r25, 7
 1fc:	08 95       	ret

000001fe <__fp_split3>:
 1fe:	57 fd       	sbrc	r21, 7
 200:	90 58       	subi	r25, 0x80	; 128
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	59 f0       	breq	.+22     	; 0x21e <__fp_splitA+0x10>
 208:	5f 3f       	cpi	r21, 0xFF	; 255
 20a:	71 f0       	breq	.+28     	; 0x228 <__fp_splitA+0x1a>
 20c:	47 95       	ror	r20

0000020e <__fp_splitA>:
 20e:	88 0f       	add	r24, r24
 210:	97 fb       	bst	r25, 7
 212:	99 1f       	adc	r25, r25
 214:	61 f0       	breq	.+24     	; 0x22e <__fp_splitA+0x20>
 216:	9f 3f       	cpi	r25, 0xFF	; 255
 218:	79 f0       	breq	.+30     	; 0x238 <__fp_splitA+0x2a>
 21a:	87 95       	ror	r24
 21c:	08 95       	ret
 21e:	12 16       	cp	r1, r18
 220:	13 06       	cpc	r1, r19
 222:	14 06       	cpc	r1, r20
 224:	55 1f       	adc	r21, r21
 226:	f2 cf       	rjmp	.-28     	; 0x20c <__fp_split3+0xe>
 228:	46 95       	lsr	r20
 22a:	f1 df       	rcall	.-30     	; 0x20e <__fp_splitA>
 22c:	08 c0       	rjmp	.+16     	; 0x23e <__fp_splitA+0x30>
 22e:	16 16       	cp	r1, r22
 230:	17 06       	cpc	r1, r23
 232:	18 06       	cpc	r1, r24
 234:	99 1f       	adc	r25, r25
 236:	f1 cf       	rjmp	.-30     	; 0x21a <__fp_splitA+0xc>
 238:	86 95       	lsr	r24
 23a:	71 05       	cpc	r23, r1
 23c:	61 05       	cpc	r22, r1
 23e:	08 94       	sec
 240:	08 95       	ret

00000242 <__fp_zero>:
 242:	e8 94       	clt

00000244 <__fp_szero>:
 244:	bb 27       	eor	r27, r27
 246:	66 27       	eor	r22, r22
 248:	77 27       	eor	r23, r23
 24a:	cb 01       	movw	r24, r22
 24c:	97 f9       	bld	r25, 7
 24e:	08 95       	ret

00000250 <__mulsf3>:
 250:	0e 94 3b 01 	call	0x276	; 0x276 <__mulsf3x>
 254:	0c 94 ac 01 	jmp	0x358	; 0x358 <__fp_round>
 258:	0e 94 9e 01 	call	0x33c	; 0x33c <__fp_pscA>
 25c:	38 f0       	brcs	.+14     	; 0x26c <__mulsf3+0x1c>
 25e:	0e 94 a5 01 	call	0x34a	; 0x34a <__fp_pscB>
 262:	20 f0       	brcs	.+8      	; 0x26c <__mulsf3+0x1c>
 264:	95 23       	and	r25, r21
 266:	11 f0       	breq	.+4      	; 0x26c <__mulsf3+0x1c>
 268:	0c 94 95 01 	jmp	0x32a	; 0x32a <__fp_inf>
 26c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__fp_nan>
 270:	11 24       	eor	r1, r1
 272:	0c 94 22 01 	jmp	0x244	; 0x244 <__fp_szero>

00000276 <__mulsf3x>:
 276:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fp_split3>
 27a:	70 f3       	brcs	.-36     	; 0x258 <__mulsf3+0x8>

0000027c <__mulsf3_pse>:
 27c:	95 9f       	mul	r25, r21
 27e:	c1 f3       	breq	.-16     	; 0x270 <__mulsf3+0x20>
 280:	95 0f       	add	r25, r21
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	55 1f       	adc	r21, r21
 286:	62 9f       	mul	r22, r18
 288:	f0 01       	movw	r30, r0
 28a:	72 9f       	mul	r23, r18
 28c:	bb 27       	eor	r27, r27
 28e:	f0 0d       	add	r31, r0
 290:	b1 1d       	adc	r27, r1
 292:	63 9f       	mul	r22, r19
 294:	aa 27       	eor	r26, r26
 296:	f0 0d       	add	r31, r0
 298:	b1 1d       	adc	r27, r1
 29a:	aa 1f       	adc	r26, r26
 29c:	64 9f       	mul	r22, r20
 29e:	66 27       	eor	r22, r22
 2a0:	b0 0d       	add	r27, r0
 2a2:	a1 1d       	adc	r26, r1
 2a4:	66 1f       	adc	r22, r22
 2a6:	82 9f       	mul	r24, r18
 2a8:	22 27       	eor	r18, r18
 2aa:	b0 0d       	add	r27, r0
 2ac:	a1 1d       	adc	r26, r1
 2ae:	62 1f       	adc	r22, r18
 2b0:	73 9f       	mul	r23, r19
 2b2:	b0 0d       	add	r27, r0
 2b4:	a1 1d       	adc	r26, r1
 2b6:	62 1f       	adc	r22, r18
 2b8:	83 9f       	mul	r24, r19
 2ba:	a0 0d       	add	r26, r0
 2bc:	61 1d       	adc	r22, r1
 2be:	22 1f       	adc	r18, r18
 2c0:	74 9f       	mul	r23, r20
 2c2:	33 27       	eor	r19, r19
 2c4:	a0 0d       	add	r26, r0
 2c6:	61 1d       	adc	r22, r1
 2c8:	23 1f       	adc	r18, r19
 2ca:	84 9f       	mul	r24, r20
 2cc:	60 0d       	add	r22, r0
 2ce:	21 1d       	adc	r18, r1
 2d0:	82 2f       	mov	r24, r18
 2d2:	76 2f       	mov	r23, r22
 2d4:	6a 2f       	mov	r22, r26
 2d6:	11 24       	eor	r1, r1
 2d8:	9f 57       	subi	r25, 0x7F	; 127
 2da:	50 40       	sbci	r21, 0x00	; 0
 2dc:	9a f0       	brmi	.+38     	; 0x304 <__mulsf3_pse+0x88>
 2de:	f1 f0       	breq	.+60     	; 0x31c <__mulsf3_pse+0xa0>
 2e0:	88 23       	and	r24, r24
 2e2:	4a f0       	brmi	.+18     	; 0x2f6 <__mulsf3_pse+0x7a>
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	bb 1f       	adc	r27, r27
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	91 50       	subi	r25, 0x01	; 1
 2f2:	50 40       	sbci	r21, 0x00	; 0
 2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__mulsf3_pse+0x64>
 2f6:	9e 3f       	cpi	r25, 0xFE	; 254
 2f8:	51 05       	cpc	r21, r1
 2fa:	80 f0       	brcs	.+32     	; 0x31c <__mulsf3_pse+0xa0>
 2fc:	0c 94 95 01 	jmp	0x32a	; 0x32a <__fp_inf>
 300:	0c 94 22 01 	jmp	0x244	; 0x244 <__fp_szero>
 304:	5f 3f       	cpi	r21, 0xFF	; 255
 306:	e4 f3       	brlt	.-8      	; 0x300 <__mulsf3_pse+0x84>
 308:	98 3e       	cpi	r25, 0xE8	; 232
 30a:	d4 f3       	brlt	.-12     	; 0x300 <__mulsf3_pse+0x84>
 30c:	86 95       	lsr	r24
 30e:	77 95       	ror	r23
 310:	67 95       	ror	r22
 312:	b7 95       	ror	r27
 314:	f7 95       	ror	r31
 316:	e7 95       	ror	r30
 318:	9f 5f       	subi	r25, 0xFF	; 255
 31a:	c1 f7       	brne	.-16     	; 0x30c <__mulsf3_pse+0x90>
 31c:	fe 2b       	or	r31, r30
 31e:	88 0f       	add	r24, r24
 320:	91 1d       	adc	r25, r1
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__fp_inf>:
 32a:	97 f9       	bld	r25, 7
 32c:	9f 67       	ori	r25, 0x7F	; 127
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	08 95       	ret

00000336 <__fp_nan>:
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	08 95       	ret

0000033c <__fp_pscA>:
 33c:	00 24       	eor	r0, r0
 33e:	0a 94       	dec	r0
 340:	16 16       	cp	r1, r22
 342:	17 06       	cpc	r1, r23
 344:	18 06       	cpc	r1, r24
 346:	09 06       	cpc	r0, r25
 348:	08 95       	ret

0000034a <__fp_pscB>:
 34a:	00 24       	eor	r0, r0
 34c:	0a 94       	dec	r0
 34e:	12 16       	cp	r1, r18
 350:	13 06       	cpc	r1, r19
 352:	14 06       	cpc	r1, r20
 354:	05 06       	cpc	r0, r21
 356:	08 95       	ret

00000358 <__fp_round>:
 358:	09 2e       	mov	r0, r25
 35a:	03 94       	inc	r0
 35c:	00 0c       	add	r0, r0
 35e:	11 f4       	brne	.+4      	; 0x364 <__fp_round+0xc>
 360:	88 23       	and	r24, r24
 362:	52 f0       	brmi	.+20     	; 0x378 <__fp_round+0x20>
 364:	bb 0f       	add	r27, r27
 366:	40 f4       	brcc	.+16     	; 0x378 <__fp_round+0x20>
 368:	bf 2b       	or	r27, r31
 36a:	11 f4       	brne	.+4      	; 0x370 <__fp_round+0x18>
 36c:	60 ff       	sbrs	r22, 0
 36e:	04 c0       	rjmp	.+8      	; 0x378 <__fp_round+0x20>
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	8f 4f       	sbci	r24, 0xFF	; 255
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
