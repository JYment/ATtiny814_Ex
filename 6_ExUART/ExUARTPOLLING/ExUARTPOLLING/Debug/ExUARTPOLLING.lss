
ExUARTPOLLING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803e00  0000012a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803e0e  00803e0e  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb9  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000178d  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000582  00000000  00000000  00003916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00003e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec9  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  00004e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ea e2       	ldi	r30, 0x2A	; 42
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	5e c0       	rjmp	.+188    	; 0x126 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "usart_poll.h"

int main(void)
{
    PORTA.DIRSET	=  _BV(1);
  6c:	c0 e0       	ldi	r28, 0x00	; 0
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	89 83       	std	Y+1, r24	; 0x01
	PORTA.OUTSET	=  _BV(1);
  74:	8d 83       	std	Y+5, r24	; 0x05
	PORTA.DIRCLR	=  _BV(2);
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	8a 83       	std	Y+2, r24	; 0x02
	PORTA.PIN2CTRL	=  PORT_PULLUPEN_bm;
  7a:	18 e0       	ldi	r17, 0x08	; 8
  7c:	1a 8b       	std	Y+18, r17	; 0x12
	PORTMUX.CTRLB	|= PORTMUX_USART0_bm;
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	81 81       	ldd	r24, Z+1	; 0x01
  84:	81 60       	ori	r24, 0x01	; 1
  86:	81 83       	std	Z+1, r24	; 0x01
	
	USART_0_init();
  88:	1e d0       	rcall	.+60     	; 0xc6 <USART_0_init>
	PORTA.DIRSET	=  _BV(3);
  8a:	19 83       	std	Y+1, r17	; 0x01
	
	USART_0_enable();
  8c:	2c d0       	rcall	.+88     	; 0xe6 <USART_0_enable>
	
    while (1) 
    {
		for(char c = 'A';;)
  8e:	c1 e4       	ldi	r28, 0x41	; 65
		{
			PORTA.OUTTGL = _BV(3);
  90:	00 e0       	ldi	r16, 0x00	; 0
  92:	14 e0       	ldi	r17, 0x04	; 4
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	f8 01       	movw	r30, r16
  98:	d7 83       	std	Z+7, r29	; 0x07
			USART_0_write(c);
  9a:	8c 2f       	mov	r24, r28
  9c:	38 d0       	rcall	.+112    	; 0x10e <USART_0_write>
			while(!(USART_0_is_rx_ready()));
  9e:	29 d0       	rcall	.+82     	; 0xf2 <USART_0_is_rx_ready>
  a0:	88 23       	and	r24, r24
  a2:	e9 f3       	breq	.-6      	; 0x9e <main+0x32>
			c = USART_0_ready();
  a4:	2c d0       	rcall	.+88     	; 0xfe <USART_0_ready>
  a6:	c8 2f       	mov	r28, r24
			
			if(c != '\r')	c++;
  a8:	8d 30       	cpi	r24, 0x0D	; 13
  aa:	11 f0       	breq	.+4      	; 0xb0 <main+0x44>
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x48>
			else USART_0_write('\n');
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	2d d0       	rcall	.+90     	; 0x10e <USART_0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	fa e6       	ldi	r31, 0x6A	; 106
  b6:	24 e0       	ldi	r18, 0x04	; 4
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	f1 50       	subi	r31, 0x01	; 1
  bc:	20 40       	sbci	r18, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	e8 cf       	rjmp	.-48     	; 0x96 <main+0x2a>

000000c6 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
    return (!(USART0.STATUS & USART_TXCIF_bm));
}
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	8c e6       	ldi	r24, 0x6C	; 108
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	80 87       	std	Z+8, r24	; 0x08
  d0:	91 87       	std	Z+9, r25	; 0x09
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	86 83       	std	Z+6, r24	; 0x06
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	9e e3       	ldi	r25, 0x3E	; 62
  da:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <__data_end+0x2>
  de:	90 93 11 3e 	sts	0x3E11, r25	; 0x803e11 <__data_end+0x3>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret

000000e6 <USART_0_enable>:
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f8 e0       	ldi	r31, 0x08	; 8
  ea:	86 81       	ldd	r24, Z+6	; 0x06
  ec:	80 6c       	ori	r24, 0xC0	; 192
  ee:	86 83       	std	Z+6, r24	; 0x06
  f0:	08 95       	ret

000000f2 <USART_0_is_rx_ready>:
  f2:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
  f6:	88 1f       	adc	r24, r24
  f8:	88 27       	eor	r24, r24
  fa:	88 1f       	adc	r24, r24
  fc:	08 95       	ret

000000fe <USART_0_ready>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_ready()
{
    while (!(USART0.STATUS & USART_RXCIF_bm));
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f8 e0       	ldi	r31, 0x08	; 8
 102:	84 81       	ldd	r24, Z+4	; 0x04
 104:	88 23       	and	r24, r24
 106:	ec f7       	brge	.-6      	; 0x102 <USART_0_ready+0x4>
    return USART0.RXDATAL;
 108:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
}
 10c:	08 95       	ret

0000010e <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 10e:	e0 e0       	ldi	r30, 0x00	; 0
 110:	f8 e0       	ldi	r31, 0x08	; 8
 112:	94 81       	ldd	r25, Z+4	; 0x04
 114:	95 ff       	sbrs	r25, 5
 116:	fd cf       	rjmp	.-6      	; 0x112 <USART_0_write+0x4>
    USART0.TXDATAL = data;
 118:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 11c:	08 95       	ret

0000011e <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 11e:	f7 df       	rcall	.-18     	; 0x10e <USART_0_write>
	return 0;
}
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
