
ExPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022a4  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015b7  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  000039d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00003cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001144  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00004e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00004e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	29 c0       	rjmp	.+82     	; 0x96 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:


int main(void)
{
//	PORTA.DIR	= 0xFF;
    PORTB.DIR	= 0xFF;			// Attiny814
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>

	// CMP0 ~ 2 Enable, PWM Enable
	TCA0.SINGLE.CTRLB	= TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
  4c:	e0 e0       	ldi	r30, 0x00	; 0
  4e:	fa e0       	ldi	r31, 0x0A	; 10
  50:	83 e7       	ldi	r24, 0x73	; 115
  52:	81 83       	std	Z+1, r24	; 0x01
	// TimerA Enable
	TCA0.SINGLE.CTRLA	= TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm;
  54:	8b e0       	ldi	r24, 0x0B	; 11
  56:	80 83       	st	Z, r24
	TCA0.SINGLE.PER		= 0xFF;			// TimerA의 주파수 = 3333333/(64*256) = 203Hz
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	86 a3       	std	Z+38, r24	; 0x26
  5e:	97 a3       	std	Z+39, r25	; 0x27
    
	while (1) 
    {
		// 밝기가 변하는 주기는 CMP0 = 16 * 80ms = 1.28초
		for(uint8_t i=0; ; i+=16)
  60:	40 e0       	ldi	r20, 0x00	; 0
		{
			TCA0.SINGLE.CMP0	= i;
  62:	84 2f       	mov	r24, r20
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	80 a7       	std	Z+40, r24	; 0x28
  68:	91 a7       	std	Z+41, r25	; 0x29
			TCA0.SINGLE.CMP1	= (i*2) & 0xFF;		// CMP0 주기의 2배
  6a:	9c 01       	movw	r18, r24
  6c:	22 0f       	add	r18, r18
  6e:	33 1f       	adc	r19, r19
  70:	33 27       	eor	r19, r19
  72:	22 a7       	std	Z+42, r18	; 0x2a
  74:	33 a7       	std	Z+43, r19	; 0x2b
			TCA0.SINGLE.CMP2	= (i*4) & 0xFF;		// CMP0 주기의 4배
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	99 27       	eor	r25, r25
  80:	84 a7       	std	Z+44, r24	; 0x2c
  82:	95 a7       	std	Z+45, r25	; 0x2d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	25 e5       	ldi	r18, 0x55	; 85
  86:	80 ed       	ldi	r24, 0xD0	; 208
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x44>
	TCA0.SINGLE.PER		= 0xFF;			// TimerA의 주파수 = 3333333/(64*256) = 203Hz
    
	while (1) 
    {
		// 밝기가 변하는 주기는 CMP0 = 16 * 80ms = 1.28초
		for(uint8_t i=0; ; i+=16)
  92:	40 5f       	subi	r20, 0xF0	; 240
  94:	e6 cf       	rjmp	.-52     	; 0x62 <main+0x1c>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
