
ExTimerb_oneshoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a58  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015ba  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  000031b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000034d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d82  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000429a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000042d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__vector_13>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	14 d0       	rcall	.+40     	; 0x6a <main>
  42:	37 c0       	rjmp	.+110    	; 0xb2 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <__vector_13>:
#include <avr/interrupt.h>
#include <util/delay.h>


ISR(TCB0_INT_vect)
{
  46:	1f 92       	push	r1
  48:	0f 92       	push	r0
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	0f 92       	push	r0
  4e:	11 24       	eor	r1, r1
  50:	8f 93       	push	r24
	PORTA.OUTCLR	= _BV(3);
  52:	88 e0       	ldi	r24, 0x08	; 8
  54:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
	TCB0.INTFLAGS	= 0xFF;
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
  5e:	8f 91       	pop	r24
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <main>:


int main(void)
{
    PORTA.DIRSET	= _BV(3);
  6a:	88 e0       	ldi	r24, 0x08	; 8
  6c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
	TCB0.CTRLB		= TCB_CNTMODE_SINGLE_gc;
  70:	e0 e4       	ldi	r30, 0x40	; 64
  72:	fa e0       	ldi	r31, 0x0A	; 10
  74:	86 e0       	ldi	r24, 0x06	; 6
  76:	81 83       	std	Z+1, r24	; 0x01
	TCB0.INTCTRL	= TCB_CAPT_bm;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	85 83       	std	Z+5, r24	; 0x05
	
	sei();
  7c:	78 94       	sei
    while (1) 
    {
		TCB0.CTRLA	&= ~TCB_ENABLE_bm;
		TCB0.CCMP	= 65535;
  7e:	4f ef       	ldi	r20, 0xFF	; 255
  80:	5f ef       	ldi	r21, 0xFF	; 255
		TCB0.CNT	= 0;
		TCB0.CTRLA	= TCB_ENABLE_bm;
  82:	21 e0       	ldi	r18, 0x01	; 1
		
		PORTA.OUTSET	= _BV(3);
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b4 e0       	ldi	r27, 0x04	; 4
  88:	98 e0       	ldi	r25, 0x08	; 8
	TCB0.INTCTRL	= TCB_CAPT_bm;
	
	sei();
    while (1) 
    {
		TCB0.CTRLA	&= ~TCB_ENABLE_bm;
  8a:	80 81       	ld	r24, Z
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	80 83       	st	Z, r24
		TCB0.CCMP	= 65535;
  90:	44 87       	std	Z+12, r20	; 0x0c
  92:	55 87       	std	Z+13, r21	; 0x0d
		TCB0.CNT	= 0;
  94:	12 86       	std	Z+10, r1	; 0x0a
  96:	13 86       	std	Z+11, r1	; 0x0b
		TCB0.CTRLA	= TCB_ENABLE_bm;
  98:	20 83       	st	Z, r18
		
		PORTA.OUTSET	= _BV(3);
  9a:	15 96       	adiw	r26, 0x05	; 5
  9c:	9c 93       	st	X, r25
  9e:	15 97       	sbiw	r26, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	3a e2       	ldi	r19, 0x2A	; 42
  a2:	6c e2       	ldi	r22, 0x2C	; 44
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	31 50       	subi	r19, 0x01	; 1
  a8:	60 40       	sbci	r22, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3c>
  ae:	00 00       	nop
  b0:	ec cf       	rjmp	.-40     	; 0x8a <main+0x20>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
