
ExADC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00803e00  00803e00  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002223  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000167b  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038b  00000000  00000000  00003b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00003ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001551  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  000054a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	33 c0       	rjmp	.+102    	; 0x82 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	19 c0       	rjmp	.+50     	; 0x56 <__vector_17>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4f d0       	rcall	.+158    	; 0xf0 <main>
  52:	a1 c0       	rjmp	.+322    	; 0x196 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_17>:
#include <util/delay.h>

volatile int16_t val;

ISR(ADC0_RESRDY_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
	val = ADC0.RES;
  64:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
  68:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
  6c:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <_edata>
  70:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <_edata+0x1>
}
  74:	9f 91       	pop	r25
  76:	8f 91       	pop	r24
  78:	0f 90       	pop	r0
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	0f 90       	pop	r0
  7e:	1f 90       	pop	r1
  80:	18 95       	reti

00000082 <__vector_13>:

ISR(TCB0_INT_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	PORTA.OUTTGL	= _BV(1);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__TEXT_REGION_LENGTH__+0x700407>
	TCB0.INTFLAGS	= 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <blink>:


void blink(uint8_t n)
{
	uint8_t i;
	PORTA.DIRSET	= _BV(3);
  a6:	98 e0       	ldi	r25, 0x08	; 8
  a8:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
	for(i=0; i<2*n; i++)
  ac:	48 2f       	mov	r20, r24
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	14 16       	cp	r1, r20
  b6:	15 06       	cpc	r1, r21
  b8:	9c f4       	brge	.+38     	; 0xe0 <blink+0x3a>
  ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTA.OUTTGL	= _BV(3);
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f4 e0       	ldi	r31, 0x04	; 4
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	87 83       	std	Z+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2a e0       	ldi	r18, 0x0A	; 10
  c6:	3b e8       	ldi	r19, 0x8B	; 139
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <blink+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <blink+0x2e>
void blink(uint8_t n)
{
	uint8_t i;
	PORTA.DIRSET	= _BV(3);
	
	for(i=0; i<2*n; i++)
  d4:	9f 5f       	subi	r25, 0xFF	; 255
  d6:	29 2f       	mov	r18, r25
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	24 17       	cp	r18, r20
  dc:	35 07       	cpc	r19, r21
  de:	8c f3       	brlt	.-30     	; 0xc2 <blink+0x1c>
  e0:	85 e1       	ldi	r24, 0x15	; 21
  e2:	96 e1       	ldi	r25, 0x16	; 22
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <blink+0x40>
  ee:	08 95       	ret

000000f0 <main>:
}


int main(void)
{
	PORTA.DIRSET	= _BV(1);
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b4 e0       	ldi	r27, 0x04	; 4
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	8c 93       	st	X, r24
  fa:	11 97       	sbiw	r26, 0x01	; 1
	
	// TCB0 Timer
	TCB0.CCMP		= 50000;
  fc:	e0 e4       	ldi	r30, 0x40	; 64
  fe:	fa e0       	ldi	r31, 0x0A	; 10
 100:	80 e5       	ldi	r24, 0x50	; 80
 102:	93 ec       	ldi	r25, 0xC3	; 195
 104:	84 87       	std	Z+12, r24	; 0x0c
 106:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.CTRLA		= TCB_ENABLE_bm;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
	TCB0.INTCTRL	= TCB_CAPT_bm;
 10c:	85 83       	std	Z+5, r24	; 0x05
	
	// ADC
	PORTA.DIRCLR	= _BV(7);		// ADC Input
 10e:	90 e8       	ldi	r25, 0x80	; 128
 110:	12 96       	adiw	r26, 0x02	; 2
 112:	9c 93       	st	X, r25
	ADC0.CTRLA		= ADC_RESSEL_10BIT_gc | ADC_ENABLE_bm;		// ADC 10 Bit Resolution
 114:	e0 e0       	ldi	r30, 0x00	; 0
 116:	f6 e0       	ldi	r31, 0x06	; 6
 118:	80 83       	st	Z, r24
	ADC0.CTRLC		= ADC_PRESC_DIV4_gc;		// Prescaler DIV 4
 11a:	82 83       	std	Z+2, r24	; 0x02
	ADC0.MUXPOS		= ADC_MUXPOS_AIN7_gc;		// ADC Input 7 (PA7)
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	96 83       	std	Z+6, r25	; 0x06
	ADC0.EVCTRL		= ADC_STARTEI_bm;			// Start Event Input Enable (start conversion on event input)
 120:	81 87       	std	Z+9, r24	; 0x09
	ADC0.INTCTRL	= ADC_RESRDY_bm;			// Enable ADC result ready interrupt
 122:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.INTFLAGS	= 0xFF;						// Clear interrupt flags
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	93 87       	std	Z+11, r25	; 0x0b
	
	// Evsys
	EVSYS.SYNCCH0		= EVSYS_SYNCCH0_TCB0_gc;
 128:	e0 e8       	ldi	r30, 0x80	; 128
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	82 87       	std	Z+10, r24	; 0x0a
//	EVSYS.ASYNCUSER1	= EVSYS_ASYNCUSER1_SYNCCH0_gc;
	
	sei();
 12e:	78 94       	sei
	
	EVSYS.ASYNCUSER1 = EVSYS_ASYNCUSER1_SYNCCH0_gc;		// Enable event forwarding to ADC
 130:	83 8b       	std	Z+19, r24	; 0x13
    while (1) 
    {
		blink(val/94);
 132:	ce e5       	ldi	r28, 0x5E	; 94
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
 13a:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <_edata+0x1>
 13e:	be 01       	movw	r22, r28
 140:	03 d0       	rcall	.+6      	; 0x148 <__divmodhi4>
 142:	86 2f       	mov	r24, r22
 144:	b0 df       	rcall	.-160    	; 0xa6 <blink>
 146:	f7 cf       	rjmp	.-18     	; 0x136 <main+0x46>

00000148 <__divmodhi4>:
 148:	97 fb       	bst	r25, 7
 14a:	07 2e       	mov	r0, r23
 14c:	16 f4       	brtc	.+4      	; 0x152 <__divmodhi4+0xa>
 14e:	00 94       	com	r0
 150:	06 d0       	rcall	.+12     	; 0x15e <__divmodhi4_neg1>
 152:	77 fd       	sbrc	r23, 7
 154:	08 d0       	rcall	.+16     	; 0x166 <__divmodhi4_neg2>
 156:	0b d0       	rcall	.+22     	; 0x16e <__udivmodhi4>
 158:	07 fc       	sbrc	r0, 7
 15a:	05 d0       	rcall	.+10     	; 0x166 <__divmodhi4_neg2>
 15c:	3e f4       	brtc	.+14     	; 0x16c <__divmodhi4_exit>

0000015e <__divmodhi4_neg1>:
 15e:	90 95       	com	r25
 160:	81 95       	neg	r24
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	08 95       	ret

00000166 <__divmodhi4_neg2>:
 166:	70 95       	com	r23
 168:	61 95       	neg	r22
 16a:	7f 4f       	sbci	r23, 0xFF	; 255

0000016c <__divmodhi4_exit>:
 16c:	08 95       	ret

0000016e <__udivmodhi4>:
 16e:	aa 1b       	sub	r26, r26
 170:	bb 1b       	sub	r27, r27
 172:	51 e1       	ldi	r21, 0x11	; 17
 174:	07 c0       	rjmp	.+14     	; 0x184 <__udivmodhi4_ep>

00000176 <__udivmodhi4_loop>:
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	a6 17       	cp	r26, r22
 17c:	b7 07       	cpc	r27, r23
 17e:	10 f0       	brcs	.+4      	; 0x184 <__udivmodhi4_ep>
 180:	a6 1b       	sub	r26, r22
 182:	b7 0b       	sbc	r27, r23

00000184 <__udivmodhi4_ep>:
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	5a 95       	dec	r21
 18a:	a9 f7       	brne	.-22     	; 0x176 <__udivmodhi4_loop>
 18c:	80 95       	com	r24
 18e:	90 95       	com	r25
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
