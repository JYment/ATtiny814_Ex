
GPIO_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803e00  00803e00  00000132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ab  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001566  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  00002fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c33  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00003f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00003fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	18 d0       	rcall	.+48     	; 0x82 <main>
  52:	33 c0       	rjmp	.+102    	; 0xba <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_4>:

volatile uint8_t flag;


ISR(PORTB_PORT_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
	if(PORTB.INTFLAGS & _BV(1))			flag = 1;			
  62:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
  66:	81 ff       	sbrs	r24, 1
  68:	03 c0       	rjmp	.+6      	; 0x70 <__vector_4+0x1a>
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <_edata>
	PORTB.INTFLAGS = _BV(1);		// PORTB1 INTFLAGS Clear
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
}
  76:	8f 91       	pop	r24
  78:	0f 90       	pop	r0
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	0f 90       	pop	r0
  7e:	1f 90       	pop	r1
  80:	18 95       	reti

00000082 <main>:


int main(void)
{
    PORTA.DIRSET = _BV(1);		// PORTA1 = OUTPUT
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	PORTB.DIRCLR = _BV(1);		// PORTB1 = INPUT
  88:	e0 e2       	ldi	r30, 0x20	; 32
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	82 83       	std	Z+2, r24	; 0x02
	
	// INTERRUPT -> ISC0_bm			  : Both	edge
	// ------------ ISC1_bm			  : Rising	edge
	// ------------ ISC1_bm | ISC0_bm : Falling edge
	PORTB.PIN1CTRL |= PORT_PULLUPEN_bm | PORT_ISC0_bm;		// PORTB1 Pull up Enable, Both edges 
  8e:	81 89       	ldd	r24, Z+17	; 0x11
  90:	89 60       	ori	r24, 0x09	; 9
  92:	81 8b       	std	Z+17, r24	; 0x11
	
	sei();
  94:	78 94       	sei
    while (1) 
    {
		if(flag == 1)
		{
			PORTA.OUTTGL = _BV(1);
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	92 e0       	ldi	r25, 0x02	; 2
	PORTB.PIN1CTRL |= PORT_PULLUPEN_bm | PORT_ISC0_bm;		// PORTB1 Pull up Enable, Both edges 
	
	sei();
    while (1) 
    {
		if(flag == 1)
  9c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1a>
		{
			PORTA.OUTTGL = _BV(1);
  a4:	97 83       	std	Z+7, r25	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	25 ed       	ldi	r18, 0xD5	; 213
  a8:	38 e0       	ldi	r19, 0x08	; 8
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2a>
			_delay_ms(200);
			flag = 0;
  b4:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <_edata>
  b8:	f1 cf       	rjmp	.-30     	; 0x9c <main+0x1a>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
