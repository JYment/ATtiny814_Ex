
ExDAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000000d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001954  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001564  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cf7  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  00004017  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	1a c0       	rjmp	.+52     	; 0x78 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:


int main(void)
{
	// ATtiny814 - PORTA6 : DAC PIN
    PORTA.DIRCLR	= _BV(6);
  46:	e0 e0       	ldi	r30, 0x00	; 0
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	80 e4       	ldi	r24, 0x40	; 64
  4c:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN6CTRL	= 0;
  4e:	16 8a       	std	Z+22, r1	; 0x16
	
	VREF.CTRLA = VREF_DAC0REFSEL_4V34_gc;
  50:	e0 ea       	ldi	r30, 0xA0	; 160
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	83 e0       	ldi	r24, 0x03	; 3
  56:	80 83       	st	Z, r24
	VREF.CTRLB = VREF_DAC0REFEN_bm;
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	81 83       	std	Z+1, r24	; 0x01
	
	DAC0.CTRLA = DAC_ENABLE_bm | DAC_OUTEN_bm;
  5c:	81 e4       	ldi	r24, 0x41	; 65
  5e:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	
    while (1) 
    {
		for(uint8_t i=0;i<256;i++)
  62:	80 e0       	ldi	r24, 0x00	; 0
		{
			DAC0.DATA = i;
  64:	e0 e8       	ldi	r30, 0x80	; 128
  66:	f6 e0       	ldi	r31, 0x06	; 6
  68:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	ad e8       	ldi	r26, 0x8D	; 141
  6c:	b0 e2       	ldi	r27, 0x20	; 32
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <main+0x28>
  72:	00 00       	nop
	
	DAC0.CTRLA = DAC_ENABLE_bm | DAC_OUTEN_bm;
	
    while (1) 
    {
		for(uint8_t i=0;i<256;i++)
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	f8 cf       	rjmp	.-16     	; 0x68 <main+0x22>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
