
ExOSCCalib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019d4  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001590  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00003484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c5c  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021b  00000000  00000000  00004104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000431f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	51 c0       	rjmp	.+162    	; 0xe6 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:


int main(void)
{
	uint8_t i;
	PORTA.DIRSET = _BV(3);
  46:	88 e0       	ldi	r24, 0x08	; 8
  48:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    while (1) 
    {
		// _PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1f);
		// MIN 0 ~ MAX 63
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0);		// 약 12Mhz
  4c:	28 ed       	ldi	r18, 0xD8	; 216
  4e:	50 e0       	ldi	r21, 0x00	; 0
		for(i=0; i<20; i++)
		{
			PORTA.OUTTGL = _BV(3);
  50:	e0 e0       	ldi	r30, 0x00	; 0
  52:	f4 e0       	ldi	r31, 0x04	; 4
  54:	98 e0       	ldi	r25, 0x08	; 8
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1F);	// 약 20Mhz
  56:	4f e1       	ldi	r20, 0x1F	; 31
		{
			PORTA.OUTTGL = _BV(3);
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x3F);	// 약 30 Mhz
  58:	3f e3       	ldi	r19, 0x3F	; 63
	PORTA.DIRSET = _BV(3);
    while (1) 
    {
		// _PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1f);
		// MIN 0 ~ MAX 63
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0);		// 약 12Mhz
  5a:	24 bf       	out	0x34, r18	; 52
  5c:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
  60:	84 e1       	ldi	r24, 0x14	; 20
		for(i=0; i<20; i++)
		{
			PORTA.OUTTGL = _BV(3);
  62:	97 83       	std	Z+7, r25	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	6a e6       	ldi	r22, 0x6A	; 106
  66:	74 e0       	ldi	r23, 0x04	; 4
  68:	a1 e0       	ldi	r26, 0x01	; 1
  6a:	61 50       	subi	r22, 0x01	; 1
  6c:	70 40       	sbci	r23, 0x00	; 0
  6e:	a0 40       	sbci	r26, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0x24>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x2e>
  74:	81 50       	subi	r24, 0x01	; 1
    while (1) 
    {
		// _PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1f);
		// MIN 0 ~ MAX 63
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0);		// 약 12Mhz
		for(i=0; i<20; i++)
  76:	a9 f7       	brne	.-22     	; 0x62 <main+0x1c>
  78:	6a e2       	ldi	r22, 0x2A	; 42
  7a:	7c e2       	ldi	r23, 0x2C	; 44
  7c:	8a e0       	ldi	r24, 0x0A	; 10
  7e:	61 50       	subi	r22, 0x01	; 1
  80:	70 40       	sbci	r23, 0x00	; 0
  82:	80 40       	sbci	r24, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x38>
  86:	00 00       	nop
		{
			PORTA.OUTTGL = _BV(3);
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1F);	// 약 20Mhz
  88:	24 bf       	out	0x34, r18	; 52
  8a:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
  8e:	84 e1       	ldi	r24, 0x14	; 20
		for(i=0; i<20; i++)
		{
			PORTA.OUTTGL = _BV(3);
  90:	97 83       	std	Z+7, r25	; 0x07
  92:	aa e6       	ldi	r26, 0x6A	; 106
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	71 e0       	ldi	r23, 0x01	; 1
  98:	a1 50       	subi	r26, 0x01	; 1
  9a:	60 40       	sbci	r22, 0x00	; 0
  9c:	70 40       	sbci	r23, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x52>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x5c>
  a2:	81 50       	subi	r24, 0x01	; 1
			PORTA.OUTTGL = _BV(3);
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x1F);	// 약 20Mhz
		for(i=0; i<20; i++)
  a4:	a9 f7       	brne	.-22     	; 0x90 <main+0x4a>
  a6:	8a e2       	ldi	r24, 0x2A	; 42
  a8:	ac e2       	ldi	r26, 0x2C	; 44
  aa:	6a e0       	ldi	r22, 0x0A	; 10
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	60 40       	sbci	r22, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x66>
  b4:	00 00       	nop
		{
			PORTA.OUTTGL = _BV(3);
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x3F);	// 약 30 Mhz
  b6:	24 bf       	out	0x34, r18	; 52
  b8:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
  bc:	84 e1       	ldi	r24, 0x14	; 20
		for(i=0; i<20; i++)
		{
			PORTA.OUTTGL = _BV(3);
  be:	97 83       	std	Z+7, r25	; 0x07
  c0:	7a e6       	ldi	r23, 0x6A	; 106
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	71 50       	subi	r23, 0x01	; 1
  c8:	a0 40       	sbci	r26, 0x00	; 0
  ca:	60 40       	sbci	r22, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x80>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x8a>
  d0:	81 50       	subi	r24, 0x01	; 1
			PORTA.OUTTGL = _BV(3);
			_delay_ms(100);
		}
		_delay_ms(1000);
		_PROTECTED_WRITE(CLKCTRL_OSC20MCALIBA, 0x3F);	// 약 30 Mhz
		for(i=0; i<20; i++)
  d2:	a9 f7       	brne	.-22     	; 0xbe <main+0x78>
  d4:	7a e2       	ldi	r23, 0x2A	; 42
  d6:	8c e2       	ldi	r24, 0x2C	; 44
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	71 50       	subi	r23, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	a0 40       	sbci	r26, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x94>
  e2:	00 00       	nop
  e4:	ba cf       	rjmp	.-140    	; 0x5a <main+0x14>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
